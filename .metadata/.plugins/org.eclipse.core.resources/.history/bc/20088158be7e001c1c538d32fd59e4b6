package com.btkAkademi.rentACar.business.concretes;

import java.time.Period;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.btkAkademi.rentACar.business.abstracts.AdditionalServiceService;
import com.btkAkademi.rentACar.business.abstracts.CarService;
import com.btkAkademi.rentACar.business.abstracts.PaymentService;
import com.btkAkademi.rentACar.business.abstracts.PromotionService;
import com.btkAkademi.rentACar.business.abstracts.RentalService;
import com.btkAkademi.rentACar.business.constants.Messages;
import com.btkAkademi.rentACar.business.dtos.AdditionalServiceListDto;
import com.btkAkademi.rentACar.business.dtos.PaymentListDto;
import com.btkAkademi.rentACar.business.dtos.RentalListDto;
import com.btkAkademi.rentACar.business.requests.paymentRequests.CreatePaymentRequest;
import com.btkAkademi.rentACar.core.adapter.FindexScoreAdapterService;
import com.btkAkademi.rentACar.core.utilities.business.BusinessRules;
import com.btkAkademi.rentACar.core.utilities.mapping.ModelMapperService;
import com.btkAkademi.rentACar.core.utilities.results.DataResult;
import com.btkAkademi.rentACar.core.utilities.results.ErrorDataResult;
import com.btkAkademi.rentACar.core.utilities.results.Result;
import com.btkAkademi.rentACar.core.utilities.results.SuccessDataResult;
import com.btkAkademi.rentACar.core.utilities.results.SuccessResult;
import com.btkAkademi.rentACar.dataAccess.abstracts.PaymentDao;
import com.btkAkademi.rentACar.entities.concretes.AdditionalService;
import com.btkAkademi.rentACar.entities.concretes.Car;
import com.btkAkademi.rentACar.entities.concretes.Payment;


@Service
public class PaymentManager  implements PaymentService{

	private PaymentDao paymentDao;
	private ModelMapperService modelMapperService;
	private AdditionalServiceService additionalService;
	private RentalService rentalService;
	private CarService carService;
	private PromotionService promotionService;
	private FindexScoreAdapterService findexScoreAdapterService;
	
	@Autowired
	public PaymentManager(PaymentDao paymentDao, ModelMapperService modelMapperService,
			AdditionalServiceService additionalService, RentalService rentalService, CarService carService,
			PromotionService promotionService,FindexScoreAdapterService findexScoreAdapterService) {
		super();
		this.paymentDao = paymentDao;
		this.modelMapperService = modelMapperService;
		this.additionalService = additionalService;
		this.rentalService = rentalService;
		this.carService=carService;
		this.promotionService=promotionService;
		this.findexScoreAdapterService=findexScoreAdapterService;
	}
	@Override
	public Result add(CreatePaymentRequest createPaymentRequest) {
		
		Payment payment=modelMapperService.forRequest().map(createPaymentRequest, Payment.class);
	
		int rentalId=createPaymentRequest.getRentalId();
		RentalListDto rental=rentalService.getById(rentalId).getData();
		
		
        double totalPrice = totalPriceCalculator(rental,createPaymentRequest.getPromotionId());
		payment.setTotalPrice(totalPrice);
		
		this.paymentDao.save(payment);
		
		return new SuccessResult(Messages.paymentAdded);
		
	}
	
	private double totalPriceCalculator(RentalListDto rental,int promosyonId) {
		double total = 0.0;
		long days = ChronoUnit.DAYS.between( rental.getRentDate() , rental.getReturnDate()) ;
		
		if(days==0) {
			days=1;
		}
		
		var car=carService.getByCarId(rental.getCarId()).getData();
			
		 total+=days * car.getDailyPrice();
		 
		// discount
			if(promosyonId !=0) { 
				double discount = 0;
				discount= promotionService.getById(promosyonId).getData().getDiscount();
				total = total - (total*discount);
				System.out.println(total);
			}
	
		
		var additionalServices= rentalService.findRentalById(rental.getId()).getData().getAdditionalServices();
		
		for (var additionalService : additionalServices) {
			total+=additionalService.getPrice();
		}
		
		return total;
	}
	@Override
	public DataResult<List<PaymentListDto>> getAllByRentalId(int id) {
		
		List<Payment> paymentList = this.paymentDao.getAllByRentalId(id); //id yoksa error veriyor
		List<PaymentListDto> response = paymentList.stream().map(payment -> modelMapperService.forDto().map(payment, PaymentListDto.class))
				.collect(Collectors.toList());
		return new SuccessDataResult<>(response);
	}
	@Override
	public DataResult<PaymentListDto> getByRentalId(int rentalId) {
		
		if(!paymentDao.existsById(rentalId))
		{
		Payment payment=this.paymentDao.getByRentalId(rentalId);
		PaymentListDto response= modelMapperService.forDto().map(payment, PaymentListDto.class);
		return new SuccessDataResult<PaymentListDto>(response,"Rental ıdye göre ödeme görüntülendi");
		}
		 return new ErrorDataResult<PaymentListDto>();
	}
	@Override
	public DataResult<Double> getTotalSumByRentalId(int rentalId, int promosyonId) {
		RentalListDto rental=rentalService.getById(rentalId).getData();
		return new SuccessDataResult<Double>(this.totalPriceCalculator(rental, promosyonId));
	}
	
	
		
	
	

}
