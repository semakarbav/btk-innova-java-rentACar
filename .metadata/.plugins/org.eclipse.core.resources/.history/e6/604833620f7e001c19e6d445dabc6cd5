package com.btkAkademi.rentACar.business.concretes;


import java.time.LocalDate;
import java.time.Period;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.btkAkademi.rentACar.business.abstracts.IndividualCustomerService;
import com.btkAkademi.rentACar.business.constants.Messages;
import com.btkAkademi.rentACar.business.dtos.CorporateCustomerListDto;
import com.btkAkademi.rentACar.business.dtos.IndividualCustomerListDto;
import com.btkAkademi.rentACar.business.requests.individualCustomerRequests.CreateIndividualCustomerRequest;
import com.btkAkademi.rentACar.business.requests.individualCustomerRequests.UpdateIndividualCustomerRequest;
import com.btkAkademi.rentACar.core.utilities.business.BusinessRules;
import com.btkAkademi.rentACar.core.utilities.mapping.ModelMapperService;
import com.btkAkademi.rentACar.core.utilities.results.DataResult;
import com.btkAkademi.rentACar.core.utilities.results.ErrorDataResult;
import com.btkAkademi.rentACar.core.utilities.results.ErrorResult;
import com.btkAkademi.rentACar.core.utilities.results.Result;
import com.btkAkademi.rentACar.core.utilities.results.SuccessDataResult;
import com.btkAkademi.rentACar.core.utilities.results.SuccessResult;
import com.btkAkademi.rentACar.dataAccess.abstracts.IndividualDao;
import com.btkAkademi.rentACar.entities.concretes.CorporateCustomer;
import com.btkAkademi.rentACar.entities.concretes.IndividualCustomer;
import com.btkAkademi.rentACar.entities.concretes.User;

@Service
public class IndividualCustomerManager implements IndividualCustomerService {
   
	private static final int ageLimit=18;
	
	private IndividualDao individualDao;
	private ModelMapperService modelMapperService;
	
	
	@Autowired
	public IndividualCustomerManager(IndividualDao individualDao, ModelMapperService modelMapperService) {
		super();
		this.individualDao = individualDao;
		this.modelMapperService = modelMapperService;
	}
	

	@Override
	public DataResult<List<IndividualCustomerListDto>> getAll() {
		
		List<IndividualCustomer> individualCustomers = this.individualDao.findAll();
		List<IndividualCustomerListDto> response = individualCustomers.stream()
				.map(individualCustomer->modelMapperService.forDto()
				.map(individualCustomer, IndividualCustomerListDto.class))
				.collect(Collectors.toList());		
		return new SuccessDataResult<List<IndividualCustomerListDto>>(response);
	
	}
	@Override
	public Result add(CreateIndividualCustomerRequest createIndividualCustomerRequest) {
		Result result=BusinessRules.run(checkIfEmailExists(createIndividualCustomerRequest.getEmail()),
				checkIfUserInAgeLimit(createIndividualCustomerRequest.getBirthDate()));
		if(result!=null) {
			return result;
		}
		IndividualCustomer individualCustomer= modelMapperService.forRequest().map(createIndividualCustomerRequest, IndividualCustomer.class);
		
		this.individualDao.save(individualCustomer);
		return new SuccessResult(Messages.individualCustomerAdded);
		
	}
	@Override
	public Result update(UpdateIndividualCustomerRequest updateIndividualCustomerRequest) {
		Result result = BusinessRules.run(
				checkIfUserInAgeLimit(updateIndividualCustomerRequest.getBirthDate()));
		if (result != null) {
			return result;
		}

		IndividualCustomer individualCustomer = this.modelMapperService.forRequest()
				.map(updateIndividualCustomerRequest, IndividualCustomer.class);
		//avoid null password 
		individualCustomer.setPassword(individualDao.findById(individualCustomer.getId()).get().getPassword());
		this.individualDao.save(individualCustomer);
		return new SuccessResult(Messages.individualCustomerUpdated);
	}
	
	private Result checkIfEmailExists(String email) {
		IndividualCustomer individualCustomer=this.individualDao.findByEmail(email);
		if(individualCustomer!=null) {
			return new ErrorResult("Aynı emaili birden fazla kullanılmaz");
		}
		return new SuccessResult();
				
	}
	private Result checkIfUserInAgeLimit(LocalDate birthDate) {
		int Age = Period.between(birthDate, LocalDate.now()).getYears();
		if(Age<ageLimit) {
			return new ErrorResult(Messages.ageNotInLimit);
		}
		return new SuccessResult();
	}


	@Override
	public DataResult<IndividualCustomerListDto> getById(int id) {
		if(individualDao.existsById(id)) {
			IndividualCustomer individualCustomer = individualDao.findById(id).get();
			IndividualCustomerListDto response = modelMapperService.forDto().map(individualCustomer,IndividualCustomerListDto.class);
			System.out.println(response.getFirsName());
			return new SuccessDataResult<IndividualCustomerListDto>(response); 
		}
		return new ErrorDataResult<IndividualCustomerListDto>();
	}


}
